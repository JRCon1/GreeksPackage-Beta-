# -*- coding: utf-8 -*-
"""Derivatives Work

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M67ZjAQxdytDkSunLVd6k-6tZZK2yvRf
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install py_vollib
# 
from py_vollib.black_scholes.greeks.analytical import delta, gamma, vega, theta, rho
import pandas as pd
import yfinance as yf
import numpy as np
from datetime import datetime, timedelta
from scipy.stats import norm
import warnings
import yfinance as yf
import pandas as pd
from datetime import datetime

# Suppress all warnings (optional, but not recommended for debugging)
warnings.simplefilter(action='ignore', category=FutureWarning)

def download_options(
    ticker_symbol,
    opt_type='c',
    max_days=60,
    lower_moneyness=0.95,
    upper_moneyness=1.05
):
    """
    Downloads and filters option chains for a given ticker according to:
      1. Option type (calls or puts)
      2. Maximum days to expiration
      3. Moneyness bounds
    """

    # 1) Retrieve the ticker data from yfinance
    ticker = yf.Ticker(ticker_symbol)

    # 2) Grab the current underlying price
    underlying_price = ticker.history(period="1d")['Close'].iloc[-1]

    # 3) Calculate the strike range using the specified moneyness
    lower_strike = underlying_price * lower_moneyness
    upper_strike = underlying_price * upper_moneyness

    # 4) Prepare a DataFrame to hold all filtered data
    relevant_columns = [
        'contractSymbol',
        'inTheMoney',
        'strike',
        'lastPrice',
        'bid',
        'ask',
        'volume',
        'openInterest',
        'impliedVolatility'
    ]
    filtered_options = pd.DataFrame(columns=relevant_columns + ['expiry'])

    # 5) Loop through each available expiration date, filtering by max_days
    for expiry_date_str in ticker.options:
        expiry_date = pd.to_datetime(expiry_date_str)
        days_to_expiry = (expiry_date - datetime.now()).days

        if days_to_expiry <= max_days:
            # 6) Retrieve calls or puts for the given expiration
            option_chain = ticker.option_chain(expiry_date_str)
            if opt_type.lower() == 'c':
                data = option_chain.calls
            elif opt_type.lower() == 'p':
                data = option_chain.puts
            else:
                continue

            # 7) Filter by strike based on moneyness
            data = data[
                (data['strike'] >= lower_strike) &
                (data['strike'] <= upper_strike)
            ].copy()

            # 8) Attach an expiry column
            data['expiry'] = expiry_date

            # 9) Concatenate only if data is non-empty
            if not data.empty:
                data = data[relevant_columns + ['expiry']]
                filtered_options = pd.concat([filtered_options, data], ignore_index=True)

    # 10) Calculate Days to Expiry for each row
    filtered_options['Days to Expiry'] = (
        pd.to_datetime(filtered_options['expiry']) - datetime.now()
    ).dt.days

    # 11) Calculate a Mid-Point price from bid and ask
    filtered_options['Mid-Point Price'] = (
        filtered_options['bid'] + filtered_options['ask']
    ) / 2

    return filtered_options
filtered_options = download_options('AAPL', opt_type='c', max_days=60, lower_moneyness=0.95, upper_moneyness=1.05)

#D1 & D2
def compute_d1(S, K, t, r, sigma, epsilon=1e-9):
    t = max(t, epsilon) 
    return (np.log(S / K) + (r + 0.5 * sigma ** 2) * t) / (sigma * np.sqrt(t))

def compute_d2(S, K, t, r, sigma, epsilon=1e-9):
    return compute_d1(S, K, t, r, sigma, epsilon) - sigma * np.sqrt(t)

def compute_d1_d2(S, K, t, r, sigma, epsilon=1e-9):
    t = max(t, epsilon)
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * t) / (sigma * np.sqrt(t))
    return d1, d1 - sigma * np.sqrt(t)

"""**SECOND ORDER GREEKS**""" 

"""**REFER TO PYVOLLIB TO CALCULATE FIRST ORDER FOR NOW**""" 

def vanna(row: pd.Series, ticker: str, r: float = 0.05, option_type: str = 'call', epsilon: float = 1e-9) -> float:
    """
    Computes Vanna (sensitivity of Vega to volatility) for a single row of an options DataFrame.

    Vanna measures the rate of change of Vega with respect to changes in the underlying price.
    It is important in managing risk when trading volatility-sensitive strategies.

    Parameters:
        row (pd.Series): A row from the options DataFrame containing:
            - 'strike' (float): Strike price of the option.
            - 'impliedVolatility' (float): Annualized implied volatility (decimal).
            - 'Days to Expiry' (int): Number of days until expiration.
        ticker (str): Ticker symbol for the underlying stock.
        r (float, optional): Risk-free interest rate (default 0.05).
        option_type (str, optional): Option type, either 'call' or 'put' (default 'call').
        epsilon (float, optional): Small value to avoid division by zero errors (default 1e-9).

    Returns:
        pd.Series: Contains Vanna, d1, and d2 values.

    Formula:
        Vanna = e^(-rT) * N'(d1) * (d2 / sigma)

    Notes:
        - This function retrieves the latest stock price using Yahoo Finance.
        - Uses the Black-Scholes model assumptions.
        - Assumes continuous compounding for risk-free rate.
    """
    # Fetch latest stock price
    S = yf.Ticker(ticker).history(period="1d")['Close'].iloc[-1]

    # Extract option details
    K = row['strike']  # Strike price
    T = max(row['Days to Expiry'] / 365, epsilon)  # Ensure T > 0
    sigma = max(row['impliedVolatility'], 0.01)  # Prevent division by zero

    # Validate inputs
    if pd.isna(S) or pd.isna(K) or pd.isna(sigma) or S <= 0 or sigma <= 0:
        return pd.Series({'Vanna': float('nan'), 'd1': float('nan'), 'd2': float('nan')})

    # Compute d1 and d2
    d1, d2 = compute_d1_d2(S, K, T, r, sigma)

    N_prime_d1 = norm.pdf(d1)
    vanna_val = np.exp(-r * T) * N_prime_d1 * (d2 / sigma)

    return round(vanna_val, 4)


def volga(row: pd.Series, ticker: str, r: float = 0.05, option_type: str = 'call', epsilon: float = 1e-9) -> float:
    """
    Computes Volga (sensitivity of Vega to volatility) for a single row of an options DataFrame.

    Volga measures how Vega changes with respect to volatility. It helps quantify how sensitive
    an option's price is to second-order volatility effects.

    Parameters:
        row (pd.Series): A row from the options DataFrame containing:
            - 'strike' (float): Strike price of the option.
            - 'impliedVolatility' (float): Annualized implied volatility (decimal).
            - 'Days to Expiry' (int): Number of days until expiration.
        ticker (str): Ticker symbol for the underlying stock.
        r (float, optional): Risk-free interest rate (default 0.05).
        option_type (str, optional): Option type, either 'call' or 'put' (default 'call').
        epsilon (float, optional): Small value to avoid division by zero errors (default 1e-9).

    Returns:
        pd.Series: Contains Volga, d1, and d2 values.

    Formula:
        Volga = S * e^(-rT) * N'(d1) * sqrt(T) * (d1 * d2) / sigma^2

    Notes:
        - This function retrieves the latest stock price using Yahoo Finance.
        - Uses the Black-Scholes model assumptions.
        - Assumes continuous compounding for risk-free rate.
    """
    # Fetch latest stock price
    S = yf.Ticker(ticker).history(period="1d")['Close'].iloc[-1]

    # Extract option details
    K = row['strike']  # Strike price
    T = max(row['Days to Expiry'] / 365, epsilon)  # Ensure T > 0
    sigma = max(row['impliedVolatility'], 0.01)  # Prevent division by zero

    # Compute d1 and d2
    d1, d2 = compute_d1_d2(S, K, T, r, sigma)

    N_prime_d1 = norm.pdf(d1)
    volga_val = S * np.exp(-r * T) * N_prime_d1 * np.sqrt(T) * (d1 * d2) / (sigma ** 2)

    return round(volga, 4)


def charm(row: pd.Series, ticker: str, r: float = 0.05, option_type: str = 'call', epsilon: float = 1e-9) -> float:
    """
    Computes Charm (Delta decay) for a single row of an options DataFrame.

    Charm measures how Delta changes with respect to time, representing the rate at which
    Delta decays as expiration approaches. This is crucial for managing directional risk in options trading.

    Parameters:
        row (pd.Series): A row from the options DataFrame containing:
            - 'strike' (float): Strike price of the option.
            - 'impliedVolatility' (float): Annualized implied volatility (decimal).
            - 'Days to Expiry' (int): Number of days until expiration.
        ticker (str): Ticker symbol for the underlying stock.
        r (float, optional): Risk-free interest rate (default 0.05).
        option_type (str, optional): Option type, either 'call' or 'put' (default 'call').
        epsilon (float, optional): Small value to avoid division by zero errors (default 1e-9).

    Returns:
        float: Computed Charm value rounded to four decimal places.

    Formula:
        Charm = -N'(d1) * (2 * r * T - d2 * sigma * sqrt(T)) / (2 * T * sigma * sqrt(T))

    Notes:
        - This function retrieves the latest stock price using Yahoo Finance.
        - Uses the Black-Scholes model assumptions.
        - Assumes continuous compounding for risk-free rate.
    """
    # Fetch latest stock price
    S = yf.Ticker(ticker).history(period="1d")['Close'].iloc[-1]

    # Extract option details
    K = row['strike']  # Strike price
    T = max(row['Days to Expiry'] / 365, epsilon)  # Ensure T > 0
    sigma = max(row['impliedVolatility'], 0.01)  # Prevent division by zero

    # Compute d1 and d2
    d1, d2 = compute_d1_d2(S, K, T, r, sigma)

    N_prime_d1 = norm.pdf(d1) 
    charm_value = -N_prime_d1 * (2 * r * T - d2 * sigma * np.sqrt(T)) / (2 * T * sigma * np.sqrt(T))

    return round(charm_value, 4)


def veta(row: pd.Series, ticker: str, r: float = 0.05, option_type: str = 'call', epsilon: float = 1e-9) -> float:
    """
    Computes Veta (sensitivity of Vega to time decay) for a single row of an options DataFrame.

    Veta measures the rate at which Vega changes as time passes, indicating how an option's sensitivity
    to volatility changes with time.

    Parameters:
        row (pd.Series): A row from the options DataFrame containing:
            - 'strike' (float): Strike price of the option.
            - 'impliedVolatility' (float): Annualized implied volatility (decimal).
            - 'Days to Expiry' (int): Number of days until expiration.
        ticker (str): Ticker symbol for the underlying stock.
        r (float, optional): Risk-free interest rate (default 0.05).
        option_type (str, optional): Option type, either 'call' or 'put' (default 'call').
        epsilon (float, optional): Small value to avoid division by zero errors (default 1e-9).

    Returns:
        float: Computed Veta value rounded to four decimal places.

    Formula:
        Veta = S * e^(-rT) * N'(d1) * sqrt(T) * ((r / sigma) - (d1 / (2T)))

    Notes:
        - This function retrieves the latest stock price using Yahoo Finance.
        - Uses the Black-Scholes model assumptions.
        - Assumes continuous compounding for risk-free rate.
    """
    # Fetch latest stock price
    S = yf.Ticker(ticker).history(period="1d")['Close'].iloc[-1]

    # Extract option details
    K = row['strike']  # Strike price
    T = max(row['Days to Expiry'] / 365, epsilon)  # Ensure T > 0
    sigma = max(row['impliedVolatility'], 0.01)  # Prevent division by zero

    # Compute d1 and d2
    d1, d2 = compute_d1_d2(S, K, T, r, sigma)

    N_prime_d1 = norm.pdf(d1)
    veta_value = S * np.exp(-r * T) * N_prime_d1 * np.sqrt(T) * ((r / sigma) - (d1 / (2 * T)))
    return round(veta_value, 4)

"""**THIRD DERIVATIVES**"""

def color(row: pd.Series, ticker: str, r: float = 0.05, option_type: str = 'call', epsilon: float = 1e-9) -> float:
    """
    Computes Color (Gamma decay) for a single row of an options DataFrame.

    Color measures how Gamma changes as time passes, indicating how the convexity of an option’s
    Delta shifts with time. It is crucial for managing second-order sensitivity to underlying price changes.

    Parameters:
        row (pd.Series): A row from the options DataFrame containing:
            - 'strike' (float): Strike price of the option.
            - 'impliedVolatility' (float): Annualized implied volatility (decimal).
            - 'Days to Expiry' (int): Number of days until expiration.
        ticker (str): Ticker symbol for the underlying stock.
        r (float, optional): Risk-free interest rate (default 0.05).
        option_type (str, optional): Option type, either 'call' or 'put' (default 'call').
        epsilon (float, optional): Small value to avoid division by zero errors (default 1e-9).

    Returns:
        float: Computed Color value rounded to four decimal places.

    Formula:
        Color = - (N'(d1) / (2 * S * T * sigma * sqrt(T))) * (2 * r * T + 1 - (d1 * d2) / (sigma * sqrt(T)))

    Notes:
        - This function retrieves the latest stock price using Yahoo Finance.
        - Uses the Black-Scholes model assumptions.
        - Assumes continuous compounding for risk-free rate.
    """
    # Fetch latest stock price
    S = yf.Ticker(ticker).history(period="1d")['Close'].iloc[-1]

    # Extract option details
    K = row['strike']  # Strike price
    T = max(row['Days to Expiry'] / 365, epsilon)  # Ensure T > 0
    sigma = max(row['impliedVolatility'], 0.01)  # Prevent division by zero

    # Compute d1 and d2
    d1, d2 = compute_d1_d2(S, K, T, r, sigma)

    N_prime_d1 = norm.pdf(d1)
    color_value = - (N_prime_d1 / (2 * S * T * sigma * np.sqrt(T))) * (2 * r * T + 1 - (d1 * d2) / (sigma * np.sqrt(T)))

    return round(color_value, 4)

def speed(row: pd.Series, ticker: str, r: float = 0.05, option_type: str = 'call', epsilon: float = 1e-9) -> float:
    """
    Computes Speed (rate of change of Gamma) for a single row of an options DataFrame.

    Speed measures how rapidly Gamma changes as the underlying price moves, representing
    the third derivative of the option price with respect to the stock price. It helps
    assess how stable or unstable an option's Delta and Gamma are.

    Parameters:
        row (pd.Series): A row from the options DataFrame containing:
            - 'strike' (float): Strike price of the option.
            - 'impliedVolatility' (float): Annualized implied volatility (decimal).
            - 'Days to Expiry' (int): Number of days until expiration.
        ticker (str): Ticker symbol for the underlying stock.
        r (float, optional): Risk-free interest rate (default 0.05).
        option_type (str, optional): Option type, either 'call' or 'put' (default 'call').
        epsilon (float, optional): Small value to avoid division by zero errors (default 1e-9).

    Returns:
        float: Computed Speed value rounded to four decimal places.

    Formula:
        Speed = (N'(d1) / (S^2 * sigma * sqrt(T))) * (d1 / (sigma * sqrt(T)) - 1)

    Notes:
        - This function retrieves the latest stock price using Yahoo Finance.
        - Uses the Black-Scholes model assumptions.
        - Assumes continuous compounding for risk-free rate.
    """
    # Fetch latest stock price
    S = yf.Ticker(ticker).history(period="1d")['Close'].iloc[-1]

    # Extract option details
    K = row['strike']  # Strike price
    T = max(row['Days to Expiry'] / 365, epsilon)  # Ensure T > 0
    sigma = max(row['impliedVolatility'], 0.01)  # Prevent division by zero

    # Compute d1 and d2
    d1, d2 = compute_d1_d2(S, K, T, r, sigma)

    N_prime_d1 = norm.pdf(d1)
    speed_value = (N_prime_d1 / (S ** 2 * sigma * np.sqrt(T))) * ((d1 / (sigma * np.sqrt(T))) - 1)

    return round(speed_value, 4)


def ultima(row: pd.Series, ticker: str, r: float = 0.05, option_type: str = 'call', epsilon: float = 1e-9) -> float:
    """
    Computes Ultima (sensitivity of Vanna to volatility) for a single row of an options DataFrame.

    Ultima measures the rate of change of Vanna with respect to changes in implied volatility.
    It helps quantify how much the convexity of Vega changes as volatility shifts.

    Parameters:
        row (pd.Series): A row from the options DataFrame containing:
            - 'strike' (float): Strike price of the option.
            - 'impliedVolatility' (float): Annualized implied volatility (decimal).
            - 'Days to Expiry' (int): Number of days until expiration.
        ticker (str): Ticker symbol for the underlying stock.
        r (float, optional): Risk-free interest rate (default 0.05).
        option_type (str, optional): Option type, either 'call' or 'put' (default 'call').
        epsilon (float, optional): Small value to avoid division by zero errors (default 1e-9).

    Returns:
        float: Computed Ultima value rounded to four decimal places.

    Formula:
        Ultima = (N'(d1) * S * sqrt(T) / sigma^2) * (d1 * d2 * (d1 * d2 - 1))

    Notes:
        - This function retrieves the latest stock price using Yahoo Finance.
        - Uses the Black-Scholes model assumptions.
        - Assumes continuous compounding for risk-free rate.
    """
    # Fetch latest stock price
    S = yf.Ticker(ticker).history(period="1d")['Close'].iloc[-1]

    # Extract option details
    K = row['strike']  # Strike price
    T = max(row['Days to Expiry'] / 365, epsilon)  # Ensure T > 0
    sigma = max(row['impliedVolatility'], 0.01)  # Prevent division by zero

    # Compute d1 and d2
    d1, d2 = compute_d1_d2(S, K, T, r, sigma)

    N_prime_d1 = norm.pdf(d1)  # Equivalent to (1 / sqrt(2π)) * exp(-0.5 * d1^2)
    ultima_value = (N_prime_d1 * S * np.sqrt(T) / sigma ** 2) * (d1 * d2 * (d1 * d2 - 1))

    return round(ultima_value, 4)


def zomma(row: pd.Series, ticker: str, r: float = 0.05, option_type: str = 'call', epsilon: float = 1e-9) -> float:
    """
    Computes Zomma (sensitivity of Gamma to volatility) for a single row of an options DataFrame.

    Zomma measures the rate of change of Gamma with respect to changes in implied volatility.
    It helps quantify how much Gamma fluctuates when volatility changes.

    Parameters:
        row (pd.Series): A row from the options DataFrame containing:
            - 'strike' (float): Strike price of the option.
            - 'impliedVolatility' (float): Annualized implied volatility (decimal).
            - 'Days to Expiry' (int): Number of days until expiration.
        ticker (str): Ticker symbol for the underlying stock.
        r (float, optional): Risk-free interest rate (default 0.05).
        option_type (str, optional): Option type, either 'call' or 'put' (default 'call').
        epsilon (float, optional): Small value to avoid division by zero errors (default 1e-9).

    Returns:
        float: Computed Zomma value rounded to four decimal places.

    Formula:
        Zomma = (N'(d1) * (d1 * d2 - 1)) / (S * sigma^2 * T)

    Notes:
        - This function retrieves the latest stock price using Yahoo Finance.
        - Uses the Black-Scholes model assumptions.
        - Assumes continuous compounding for risk-free rate.
    """
    # Fetch latest stock price
    S = yf.Ticker(ticker).history(period="1d")['Close'].iloc[-1]

    # Extract option details
    K = row['strike']  # Strike price
    T = max(row['Days to Expiry'] / 365, epsilon)  # Ensure T > 0
    sigma = max(row['impliedVolatility'], 0.01)  # Prevent division by zero

    # Compute d1 and d2
    d1, d2 = compute_d1_d2(S, K, T, r, sigma)

    N_prime_d1 = norm.pdf(d1)  
    zomma_value = (N_prime_d1 * (d1 * d2 - 1)) / (S * sigma ** 2 * T)

    return round(zomma_value, 4)
